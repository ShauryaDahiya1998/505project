/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FrontEndCoordOps_TYPES_H
#define FrontEndCoordOps_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace FrontEndCoordOps {

class ServerDetails;

typedef struct _ServerDetails__isset {
  _ServerDetails__isset() : serverIP(false), port(false) {}
  bool serverIP :1;
  bool port :1;
} _ServerDetails__isset;

class ServerDetails : public virtual ::apache::thrift::TBase {
 public:

  ServerDetails(const ServerDetails&);
  ServerDetails& operator=(const ServerDetails&);
  ServerDetails() : serverIP(), port() {
  }

  virtual ~ServerDetails() noexcept;
  std::string serverIP;
  std::string port;

  _ServerDetails__isset __isset;

  void __set_serverIP(const std::string& val);

  void __set_port(const std::string& val);

  bool operator == (const ServerDetails & rhs) const
  {
    if (!(serverIP == rhs.serverIP))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const ServerDetails &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ServerDetails & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(ServerDetails &a, ServerDetails &b);

std::ostream& operator<<(std::ostream& out, const ServerDetails& obj);

} // namespace

#endif
