/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef StorageOps_H
#define StorageOps_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "StorageOps_types.h"

namespace storage {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class StorageOpsIf {
 public:
  virtual ~StorageOpsIf() {}
  virtual bool put(const std::string& row, const std::string& col, const std::string& value) = 0;
  virtual bool replicateData(const std::string& row, const std::string& col, const std::string& value) = 0;
  virtual void get(std::string& _return, const std::string& row, const std::string& col) = 0;
  virtual bool deleteCell(const std::string& row, const std::string& col) = 0;
  virtual bool deleteReplicate(const std::string& row, const std::string& col) = 0;
  virtual bool cput(const std::string& row, const std::string& col, const std::string& old_value, const std::string& new_value) = 0;
  virtual void sync(std::string& _return, const std::string& which) = 0;
  virtual void setAlive(const bool isAlive) = 0;
  virtual void kvsData(std::string& _return) = 0;
};

class StorageOpsIfFactory {
 public:
  typedef StorageOpsIf Handler;

  virtual ~StorageOpsIfFactory() {}

  virtual StorageOpsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(StorageOpsIf* /* handler */) = 0;
};

class StorageOpsIfSingletonFactory : virtual public StorageOpsIfFactory {
 public:
  StorageOpsIfSingletonFactory(const ::std::shared_ptr<StorageOpsIf>& iface) : iface_(iface) {}
  virtual ~StorageOpsIfSingletonFactory() {}

  virtual StorageOpsIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(StorageOpsIf* /* handler */) {}

 protected:
  ::std::shared_ptr<StorageOpsIf> iface_;
};

class StorageOpsNull : virtual public StorageOpsIf {
 public:
  virtual ~StorageOpsNull() {}
  bool put(const std::string& /* row */, const std::string& /* col */, const std::string& /* value */) {
    bool _return = false;
    return _return;
  }
  bool replicateData(const std::string& /* row */, const std::string& /* col */, const std::string& /* value */) {
    bool _return = false;
    return _return;
  }
  void get(std::string& /* _return */, const std::string& /* row */, const std::string& /* col */) {
    return;
  }
  bool deleteCell(const std::string& /* row */, const std::string& /* col */) {
    bool _return = false;
    return _return;
  }
  bool deleteReplicate(const std::string& /* row */, const std::string& /* col */) {
    bool _return = false;
    return _return;
  }
  bool cput(const std::string& /* row */, const std::string& /* col */, const std::string& /* old_value */, const std::string& /* new_value */) {
    bool _return = false;
    return _return;
  }
  void sync(std::string& /* _return */, const std::string& /* which */) {
    return;
  }
  void setAlive(const bool /* isAlive */) {
    return;
  }
  void kvsData(std::string& /* _return */) {
    return;
  }
};

typedef struct _StorageOps_put_args__isset {
  _StorageOps_put_args__isset() : row(false), col(false), value(false) {}
  bool row :1;
  bool col :1;
  bool value :1;
} _StorageOps_put_args__isset;

class StorageOps_put_args {
 public:

  StorageOps_put_args(const StorageOps_put_args&);
  StorageOps_put_args& operator=(const StorageOps_put_args&);
  StorageOps_put_args() : row(), col(), value() {
  }

  virtual ~StorageOps_put_args() noexcept;
  std::string row;
  std::string col;
  std::string value;

  _StorageOps_put_args__isset __isset;

  void __set_row(const std::string& val);

  void __set_col(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const StorageOps_put_args & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(col == rhs.col))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const StorageOps_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageOps_put_pargs {
 public:


  virtual ~StorageOps_put_pargs() noexcept;
  const std::string* row;
  const std::string* col;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_put_result__isset {
  _StorageOps_put_result__isset() : success(false) {}
  bool success :1;
} _StorageOps_put_result__isset;

class StorageOps_put_result {
 public:

  StorageOps_put_result(const StorageOps_put_result&);
  StorageOps_put_result& operator=(const StorageOps_put_result&);
  StorageOps_put_result() : success(0) {
  }

  virtual ~StorageOps_put_result() noexcept;
  bool success;

  _StorageOps_put_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const StorageOps_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageOps_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_put_presult__isset {
  _StorageOps_put_presult__isset() : success(false) {}
  bool success :1;
} _StorageOps_put_presult__isset;

class StorageOps_put_presult {
 public:


  virtual ~StorageOps_put_presult() noexcept;
  bool* success;

  _StorageOps_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageOps_replicateData_args__isset {
  _StorageOps_replicateData_args__isset() : row(false), col(false), value(false) {}
  bool row :1;
  bool col :1;
  bool value :1;
} _StorageOps_replicateData_args__isset;

class StorageOps_replicateData_args {
 public:

  StorageOps_replicateData_args(const StorageOps_replicateData_args&);
  StorageOps_replicateData_args& operator=(const StorageOps_replicateData_args&);
  StorageOps_replicateData_args() : row(), col(), value() {
  }

  virtual ~StorageOps_replicateData_args() noexcept;
  std::string row;
  std::string col;
  std::string value;

  _StorageOps_replicateData_args__isset __isset;

  void __set_row(const std::string& val);

  void __set_col(const std::string& val);

  void __set_value(const std::string& val);

  bool operator == (const StorageOps_replicateData_args & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(col == rhs.col))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const StorageOps_replicateData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_replicateData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageOps_replicateData_pargs {
 public:


  virtual ~StorageOps_replicateData_pargs() noexcept;
  const std::string* row;
  const std::string* col;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_replicateData_result__isset {
  _StorageOps_replicateData_result__isset() : success(false) {}
  bool success :1;
} _StorageOps_replicateData_result__isset;

class StorageOps_replicateData_result {
 public:

  StorageOps_replicateData_result(const StorageOps_replicateData_result&);
  StorageOps_replicateData_result& operator=(const StorageOps_replicateData_result&);
  StorageOps_replicateData_result() : success(0) {
  }

  virtual ~StorageOps_replicateData_result() noexcept;
  bool success;

  _StorageOps_replicateData_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const StorageOps_replicateData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageOps_replicateData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_replicateData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_replicateData_presult__isset {
  _StorageOps_replicateData_presult__isset() : success(false) {}
  bool success :1;
} _StorageOps_replicateData_presult__isset;

class StorageOps_replicateData_presult {
 public:


  virtual ~StorageOps_replicateData_presult() noexcept;
  bool* success;

  _StorageOps_replicateData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageOps_get_args__isset {
  _StorageOps_get_args__isset() : row(false), col(false) {}
  bool row :1;
  bool col :1;
} _StorageOps_get_args__isset;

class StorageOps_get_args {
 public:

  StorageOps_get_args(const StorageOps_get_args&);
  StorageOps_get_args& operator=(const StorageOps_get_args&);
  StorageOps_get_args() : row(), col() {
  }

  virtual ~StorageOps_get_args() noexcept;
  std::string row;
  std::string col;

  _StorageOps_get_args__isset __isset;

  void __set_row(const std::string& val);

  void __set_col(const std::string& val);

  bool operator == (const StorageOps_get_args & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(col == rhs.col))
      return false;
    return true;
  }
  bool operator != (const StorageOps_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_get_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageOps_get_pargs {
 public:


  virtual ~StorageOps_get_pargs() noexcept;
  const std::string* row;
  const std::string* col;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_get_result__isset {
  _StorageOps_get_result__isset() : success(false) {}
  bool success :1;
} _StorageOps_get_result__isset;

class StorageOps_get_result {
 public:

  StorageOps_get_result(const StorageOps_get_result&);
  StorageOps_get_result& operator=(const StorageOps_get_result&);
  StorageOps_get_result() : success() {
  }

  virtual ~StorageOps_get_result() noexcept;
  std::string success;

  _StorageOps_get_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const StorageOps_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageOps_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_get_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_get_presult__isset {
  _StorageOps_get_presult__isset() : success(false) {}
  bool success :1;
} _StorageOps_get_presult__isset;

class StorageOps_get_presult {
 public:


  virtual ~StorageOps_get_presult() noexcept;
  std::string* success;

  _StorageOps_get_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageOps_deleteCell_args__isset {
  _StorageOps_deleteCell_args__isset() : row(false), col(false) {}
  bool row :1;
  bool col :1;
} _StorageOps_deleteCell_args__isset;

class StorageOps_deleteCell_args {
 public:

  StorageOps_deleteCell_args(const StorageOps_deleteCell_args&);
  StorageOps_deleteCell_args& operator=(const StorageOps_deleteCell_args&);
  StorageOps_deleteCell_args() : row(), col() {
  }

  virtual ~StorageOps_deleteCell_args() noexcept;
  std::string row;
  std::string col;

  _StorageOps_deleteCell_args__isset __isset;

  void __set_row(const std::string& val);

  void __set_col(const std::string& val);

  bool operator == (const StorageOps_deleteCell_args & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(col == rhs.col))
      return false;
    return true;
  }
  bool operator != (const StorageOps_deleteCell_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_deleteCell_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageOps_deleteCell_pargs {
 public:


  virtual ~StorageOps_deleteCell_pargs() noexcept;
  const std::string* row;
  const std::string* col;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_deleteCell_result__isset {
  _StorageOps_deleteCell_result__isset() : success(false) {}
  bool success :1;
} _StorageOps_deleteCell_result__isset;

class StorageOps_deleteCell_result {
 public:

  StorageOps_deleteCell_result(const StorageOps_deleteCell_result&);
  StorageOps_deleteCell_result& operator=(const StorageOps_deleteCell_result&);
  StorageOps_deleteCell_result() : success(0) {
  }

  virtual ~StorageOps_deleteCell_result() noexcept;
  bool success;

  _StorageOps_deleteCell_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const StorageOps_deleteCell_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageOps_deleteCell_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_deleteCell_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_deleteCell_presult__isset {
  _StorageOps_deleteCell_presult__isset() : success(false) {}
  bool success :1;
} _StorageOps_deleteCell_presult__isset;

class StorageOps_deleteCell_presult {
 public:


  virtual ~StorageOps_deleteCell_presult() noexcept;
  bool* success;

  _StorageOps_deleteCell_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageOps_deleteReplicate_args__isset {
  _StorageOps_deleteReplicate_args__isset() : row(false), col(false) {}
  bool row :1;
  bool col :1;
} _StorageOps_deleteReplicate_args__isset;

class StorageOps_deleteReplicate_args {
 public:

  StorageOps_deleteReplicate_args(const StorageOps_deleteReplicate_args&);
  StorageOps_deleteReplicate_args& operator=(const StorageOps_deleteReplicate_args&);
  StorageOps_deleteReplicate_args() : row(), col() {
  }

  virtual ~StorageOps_deleteReplicate_args() noexcept;
  std::string row;
  std::string col;

  _StorageOps_deleteReplicate_args__isset __isset;

  void __set_row(const std::string& val);

  void __set_col(const std::string& val);

  bool operator == (const StorageOps_deleteReplicate_args & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(col == rhs.col))
      return false;
    return true;
  }
  bool operator != (const StorageOps_deleteReplicate_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_deleteReplicate_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageOps_deleteReplicate_pargs {
 public:


  virtual ~StorageOps_deleteReplicate_pargs() noexcept;
  const std::string* row;
  const std::string* col;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_deleteReplicate_result__isset {
  _StorageOps_deleteReplicate_result__isset() : success(false) {}
  bool success :1;
} _StorageOps_deleteReplicate_result__isset;

class StorageOps_deleteReplicate_result {
 public:

  StorageOps_deleteReplicate_result(const StorageOps_deleteReplicate_result&);
  StorageOps_deleteReplicate_result& operator=(const StorageOps_deleteReplicate_result&);
  StorageOps_deleteReplicate_result() : success(0) {
  }

  virtual ~StorageOps_deleteReplicate_result() noexcept;
  bool success;

  _StorageOps_deleteReplicate_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const StorageOps_deleteReplicate_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageOps_deleteReplicate_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_deleteReplicate_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_deleteReplicate_presult__isset {
  _StorageOps_deleteReplicate_presult__isset() : success(false) {}
  bool success :1;
} _StorageOps_deleteReplicate_presult__isset;

class StorageOps_deleteReplicate_presult {
 public:


  virtual ~StorageOps_deleteReplicate_presult() noexcept;
  bool* success;

  _StorageOps_deleteReplicate_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageOps_cput_args__isset {
  _StorageOps_cput_args__isset() : row(false), col(false), old_value(false), new_value(false) {}
  bool row :1;
  bool col :1;
  bool old_value :1;
  bool new_value :1;
} _StorageOps_cput_args__isset;

class StorageOps_cput_args {
 public:

  StorageOps_cput_args(const StorageOps_cput_args&);
  StorageOps_cput_args& operator=(const StorageOps_cput_args&);
  StorageOps_cput_args() : row(), col(), old_value(), new_value() {
  }

  virtual ~StorageOps_cput_args() noexcept;
  std::string row;
  std::string col;
  std::string old_value;
  std::string new_value;

  _StorageOps_cput_args__isset __isset;

  void __set_row(const std::string& val);

  void __set_col(const std::string& val);

  void __set_old_value(const std::string& val);

  void __set_new_value(const std::string& val);

  bool operator == (const StorageOps_cput_args & rhs) const
  {
    if (!(row == rhs.row))
      return false;
    if (!(col == rhs.col))
      return false;
    if (!(old_value == rhs.old_value))
      return false;
    if (!(new_value == rhs.new_value))
      return false;
    return true;
  }
  bool operator != (const StorageOps_cput_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_cput_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageOps_cput_pargs {
 public:


  virtual ~StorageOps_cput_pargs() noexcept;
  const std::string* row;
  const std::string* col;
  const std::string* old_value;
  const std::string* new_value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_cput_result__isset {
  _StorageOps_cput_result__isset() : success(false) {}
  bool success :1;
} _StorageOps_cput_result__isset;

class StorageOps_cput_result {
 public:

  StorageOps_cput_result(const StorageOps_cput_result&);
  StorageOps_cput_result& operator=(const StorageOps_cput_result&);
  StorageOps_cput_result() : success(0) {
  }

  virtual ~StorageOps_cput_result() noexcept;
  bool success;

  _StorageOps_cput_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const StorageOps_cput_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageOps_cput_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_cput_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_cput_presult__isset {
  _StorageOps_cput_presult__isset() : success(false) {}
  bool success :1;
} _StorageOps_cput_presult__isset;

class StorageOps_cput_presult {
 public:


  virtual ~StorageOps_cput_presult() noexcept;
  bool* success;

  _StorageOps_cput_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageOps_sync_args__isset {
  _StorageOps_sync_args__isset() : which(false) {}
  bool which :1;
} _StorageOps_sync_args__isset;

class StorageOps_sync_args {
 public:

  StorageOps_sync_args(const StorageOps_sync_args&);
  StorageOps_sync_args& operator=(const StorageOps_sync_args&);
  StorageOps_sync_args() : which() {
  }

  virtual ~StorageOps_sync_args() noexcept;
  std::string which;

  _StorageOps_sync_args__isset __isset;

  void __set_which(const std::string& val);

  bool operator == (const StorageOps_sync_args & rhs) const
  {
    if (!(which == rhs.which))
      return false;
    return true;
  }
  bool operator != (const StorageOps_sync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_sync_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageOps_sync_pargs {
 public:


  virtual ~StorageOps_sync_pargs() noexcept;
  const std::string* which;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_sync_result__isset {
  _StorageOps_sync_result__isset() : success(false) {}
  bool success :1;
} _StorageOps_sync_result__isset;

class StorageOps_sync_result {
 public:

  StorageOps_sync_result(const StorageOps_sync_result&);
  StorageOps_sync_result& operator=(const StorageOps_sync_result&);
  StorageOps_sync_result() : success() {
  }

  virtual ~StorageOps_sync_result() noexcept;
  std::string success;

  _StorageOps_sync_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const StorageOps_sync_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageOps_sync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_sync_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_sync_presult__isset {
  _StorageOps_sync_presult__isset() : success(false) {}
  bool success :1;
} _StorageOps_sync_presult__isset;

class StorageOps_sync_presult {
 public:


  virtual ~StorageOps_sync_presult() noexcept;
  std::string* success;

  _StorageOps_sync_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _StorageOps_setAlive_args__isset {
  _StorageOps_setAlive_args__isset() : isAlive(false) {}
  bool isAlive :1;
} _StorageOps_setAlive_args__isset;

class StorageOps_setAlive_args {
 public:

  StorageOps_setAlive_args(const StorageOps_setAlive_args&);
  StorageOps_setAlive_args& operator=(const StorageOps_setAlive_args&);
  StorageOps_setAlive_args() : isAlive(0) {
  }

  virtual ~StorageOps_setAlive_args() noexcept;
  bool isAlive;

  _StorageOps_setAlive_args__isset __isset;

  void __set_isAlive(const bool val);

  bool operator == (const StorageOps_setAlive_args & rhs) const
  {
    if (!(isAlive == rhs.isAlive))
      return false;
    return true;
  }
  bool operator != (const StorageOps_setAlive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_setAlive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageOps_setAlive_pargs {
 public:


  virtual ~StorageOps_setAlive_pargs() noexcept;
  const bool* isAlive;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageOps_setAlive_result {
 public:

  StorageOps_setAlive_result(const StorageOps_setAlive_result&);
  StorageOps_setAlive_result& operator=(const StorageOps_setAlive_result&);
  StorageOps_setAlive_result() {
  }

  virtual ~StorageOps_setAlive_result() noexcept;

  bool operator == (const StorageOps_setAlive_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageOps_setAlive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_setAlive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageOps_setAlive_presult {
 public:


  virtual ~StorageOps_setAlive_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class StorageOps_kvsData_args {
 public:

  StorageOps_kvsData_args(const StorageOps_kvsData_args&);
  StorageOps_kvsData_args& operator=(const StorageOps_kvsData_args&);
  StorageOps_kvsData_args() {
  }

  virtual ~StorageOps_kvsData_args() noexcept;

  bool operator == (const StorageOps_kvsData_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const StorageOps_kvsData_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_kvsData_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class StorageOps_kvsData_pargs {
 public:


  virtual ~StorageOps_kvsData_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_kvsData_result__isset {
  _StorageOps_kvsData_result__isset() : success(false) {}
  bool success :1;
} _StorageOps_kvsData_result__isset;

class StorageOps_kvsData_result {
 public:

  StorageOps_kvsData_result(const StorageOps_kvsData_result&);
  StorageOps_kvsData_result& operator=(const StorageOps_kvsData_result&);
  StorageOps_kvsData_result() : success() {
  }

  virtual ~StorageOps_kvsData_result() noexcept;
  std::string success;

  _StorageOps_kvsData_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const StorageOps_kvsData_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const StorageOps_kvsData_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StorageOps_kvsData_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _StorageOps_kvsData_presult__isset {
  _StorageOps_kvsData_presult__isset() : success(false) {}
  bool success :1;
} _StorageOps_kvsData_presult__isset;

class StorageOps_kvsData_presult {
 public:


  virtual ~StorageOps_kvsData_presult() noexcept;
  std::string* success;

  _StorageOps_kvsData_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class StorageOpsClient : virtual public StorageOpsIf {
 public:
  StorageOpsClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  StorageOpsClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool put(const std::string& row, const std::string& col, const std::string& value);
  void send_put(const std::string& row, const std::string& col, const std::string& value);
  bool recv_put();
  bool replicateData(const std::string& row, const std::string& col, const std::string& value);
  void send_replicateData(const std::string& row, const std::string& col, const std::string& value);
  bool recv_replicateData();
  void get(std::string& _return, const std::string& row, const std::string& col);
  void send_get(const std::string& row, const std::string& col);
  void recv_get(std::string& _return);
  bool deleteCell(const std::string& row, const std::string& col);
  void send_deleteCell(const std::string& row, const std::string& col);
  bool recv_deleteCell();
  bool deleteReplicate(const std::string& row, const std::string& col);
  void send_deleteReplicate(const std::string& row, const std::string& col);
  bool recv_deleteReplicate();
  bool cput(const std::string& row, const std::string& col, const std::string& old_value, const std::string& new_value);
  void send_cput(const std::string& row, const std::string& col, const std::string& old_value, const std::string& new_value);
  bool recv_cput();
  void sync(std::string& _return, const std::string& which);
  void send_sync(const std::string& which);
  void recv_sync(std::string& _return);
  void setAlive(const bool isAlive);
  void send_setAlive(const bool isAlive);
  void recv_setAlive();
  void kvsData(std::string& _return);
  void send_kvsData();
  void recv_kvsData(std::string& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class StorageOpsProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<StorageOpsIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (StorageOpsProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_replicateData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteCell(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteReplicate(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cput(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setAlive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_kvsData(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  StorageOpsProcessor(::std::shared_ptr<StorageOpsIf> iface) :
    iface_(iface) {
    processMap_["put"] = &StorageOpsProcessor::process_put;
    processMap_["replicateData"] = &StorageOpsProcessor::process_replicateData;
    processMap_["get"] = &StorageOpsProcessor::process_get;
    processMap_["deleteCell"] = &StorageOpsProcessor::process_deleteCell;
    processMap_["deleteReplicate"] = &StorageOpsProcessor::process_deleteReplicate;
    processMap_["cput"] = &StorageOpsProcessor::process_cput;
    processMap_["sync"] = &StorageOpsProcessor::process_sync;
    processMap_["setAlive"] = &StorageOpsProcessor::process_setAlive;
    processMap_["kvsData"] = &StorageOpsProcessor::process_kvsData;
  }

  virtual ~StorageOpsProcessor() {}
};

class StorageOpsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  StorageOpsProcessorFactory(const ::std::shared_ptr< StorageOpsIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< StorageOpsIfFactory > handlerFactory_;
};

class StorageOpsMultiface : virtual public StorageOpsIf {
 public:
  StorageOpsMultiface(std::vector<std::shared_ptr<StorageOpsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~StorageOpsMultiface() {}
 protected:
  std::vector<std::shared_ptr<StorageOpsIf> > ifaces_;
  StorageOpsMultiface() {}
  void add(::std::shared_ptr<StorageOpsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool put(const std::string& row, const std::string& col, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(row, col, value);
    }
    return ifaces_[i]->put(row, col, value);
  }

  bool replicateData(const std::string& row, const std::string& col, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->replicateData(row, col, value);
    }
    return ifaces_[i]->replicateData(row, col, value);
  }

  void get(std::string& _return, const std::string& row, const std::string& col) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, row, col);
    }
    ifaces_[i]->get(_return, row, col);
    return;
  }

  bool deleteCell(const std::string& row, const std::string& col) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteCell(row, col);
    }
    return ifaces_[i]->deleteCell(row, col);
  }

  bool deleteReplicate(const std::string& row, const std::string& col) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteReplicate(row, col);
    }
    return ifaces_[i]->deleteReplicate(row, col);
  }

  bool cput(const std::string& row, const std::string& col, const std::string& old_value, const std::string& new_value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cput(row, col, old_value, new_value);
    }
    return ifaces_[i]->cput(row, col, old_value, new_value);
  }

  void sync(std::string& _return, const std::string& which) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sync(_return, which);
    }
    ifaces_[i]->sync(_return, which);
    return;
  }

  void setAlive(const bool isAlive) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setAlive(isAlive);
    }
    ifaces_[i]->setAlive(isAlive);
  }

  void kvsData(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->kvsData(_return);
    }
    ifaces_[i]->kvsData(_return);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class StorageOpsConcurrentClient : virtual public StorageOpsIf {
 public:
  StorageOpsConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  StorageOpsConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool put(const std::string& row, const std::string& col, const std::string& value);
  int32_t send_put(const std::string& row, const std::string& col, const std::string& value);
  bool recv_put(const int32_t seqid);
  bool replicateData(const std::string& row, const std::string& col, const std::string& value);
  int32_t send_replicateData(const std::string& row, const std::string& col, const std::string& value);
  bool recv_replicateData(const int32_t seqid);
  void get(std::string& _return, const std::string& row, const std::string& col);
  int32_t send_get(const std::string& row, const std::string& col);
  void recv_get(std::string& _return, const int32_t seqid);
  bool deleteCell(const std::string& row, const std::string& col);
  int32_t send_deleteCell(const std::string& row, const std::string& col);
  bool recv_deleteCell(const int32_t seqid);
  bool deleteReplicate(const std::string& row, const std::string& col);
  int32_t send_deleteReplicate(const std::string& row, const std::string& col);
  bool recv_deleteReplicate(const int32_t seqid);
  bool cput(const std::string& row, const std::string& col, const std::string& old_value, const std::string& new_value);
  int32_t send_cput(const std::string& row, const std::string& col, const std::string& old_value, const std::string& new_value);
  bool recv_cput(const int32_t seqid);
  void sync(std::string& _return, const std::string& which);
  int32_t send_sync(const std::string& which);
  void recv_sync(std::string& _return, const int32_t seqid);
  void setAlive(const bool isAlive);
  int32_t send_setAlive(const bool isAlive);
  void recv_setAlive(const int32_t seqid);
  void kvsData(std::string& _return);
  int32_t send_kvsData();
  void recv_kvsData(std::string& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
