/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FrontEndCoordOps_H
#define FrontEndCoordOps_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "FrontEndCoordOps_types.h"

namespace FrontEndCoordOps {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FrontEndCoordOpsIf {
 public:
  virtual ~FrontEndCoordOpsIf() {}
  virtual void notifyConnectionClosed(const std::string& serverIP, const std::string& port) = 0;
  virtual void markServerInactive(const std::string& serverIP, const std::string& port) = 0;
};

class FrontEndCoordOpsIfFactory {
 public:
  typedef FrontEndCoordOpsIf Handler;

  virtual ~FrontEndCoordOpsIfFactory() {}

  virtual FrontEndCoordOpsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FrontEndCoordOpsIf* /* handler */) = 0;
};

class FrontEndCoordOpsIfSingletonFactory : virtual public FrontEndCoordOpsIfFactory {
 public:
  FrontEndCoordOpsIfSingletonFactory(const ::std::shared_ptr<FrontEndCoordOpsIf>& iface) : iface_(iface) {}
  virtual ~FrontEndCoordOpsIfSingletonFactory() {}

  virtual FrontEndCoordOpsIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FrontEndCoordOpsIf* /* handler */) {}

 protected:
  ::std::shared_ptr<FrontEndCoordOpsIf> iface_;
};

class FrontEndCoordOpsNull : virtual public FrontEndCoordOpsIf {
 public:
  virtual ~FrontEndCoordOpsNull() {}
  void notifyConnectionClosed(const std::string& /* serverIP */, const std::string& /* port */) {
    return;
  }
  void markServerInactive(const std::string& /* serverIP */, const std::string& /* port */) {
    return;
  }
};

typedef struct _FrontEndCoordOps_notifyConnectionClosed_args__isset {
  _FrontEndCoordOps_notifyConnectionClosed_args__isset() : serverIP(false), port(false) {}
  bool serverIP :1;
  bool port :1;
} _FrontEndCoordOps_notifyConnectionClosed_args__isset;

class FrontEndCoordOps_notifyConnectionClosed_args {
 public:

  FrontEndCoordOps_notifyConnectionClosed_args(const FrontEndCoordOps_notifyConnectionClosed_args&);
  FrontEndCoordOps_notifyConnectionClosed_args& operator=(const FrontEndCoordOps_notifyConnectionClosed_args&);
  FrontEndCoordOps_notifyConnectionClosed_args() : serverIP(), port() {
  }

  virtual ~FrontEndCoordOps_notifyConnectionClosed_args() noexcept;
  std::string serverIP;
  std::string port;

  _FrontEndCoordOps_notifyConnectionClosed_args__isset __isset;

  void __set_serverIP(const std::string& val);

  void __set_port(const std::string& val);

  bool operator == (const FrontEndCoordOps_notifyConnectionClosed_args & rhs) const
  {
    if (!(serverIP == rhs.serverIP))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const FrontEndCoordOps_notifyConnectionClosed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontEndCoordOps_notifyConnectionClosed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontEndCoordOps_notifyConnectionClosed_pargs {
 public:


  virtual ~FrontEndCoordOps_notifyConnectionClosed_pargs() noexcept;
  const std::string* serverIP;
  const std::string* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontEndCoordOps_notifyConnectionClosed_result {
 public:

  FrontEndCoordOps_notifyConnectionClosed_result(const FrontEndCoordOps_notifyConnectionClosed_result&);
  FrontEndCoordOps_notifyConnectionClosed_result& operator=(const FrontEndCoordOps_notifyConnectionClosed_result&);
  FrontEndCoordOps_notifyConnectionClosed_result() {
  }

  virtual ~FrontEndCoordOps_notifyConnectionClosed_result() noexcept;

  bool operator == (const FrontEndCoordOps_notifyConnectionClosed_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FrontEndCoordOps_notifyConnectionClosed_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontEndCoordOps_notifyConnectionClosed_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontEndCoordOps_notifyConnectionClosed_presult {
 public:


  virtual ~FrontEndCoordOps_notifyConnectionClosed_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _FrontEndCoordOps_markServerInactive_args__isset {
  _FrontEndCoordOps_markServerInactive_args__isset() : serverIP(false), port(false) {}
  bool serverIP :1;
  bool port :1;
} _FrontEndCoordOps_markServerInactive_args__isset;

class FrontEndCoordOps_markServerInactive_args {
 public:

  FrontEndCoordOps_markServerInactive_args(const FrontEndCoordOps_markServerInactive_args&);
  FrontEndCoordOps_markServerInactive_args& operator=(const FrontEndCoordOps_markServerInactive_args&);
  FrontEndCoordOps_markServerInactive_args() : serverIP(), port() {
  }

  virtual ~FrontEndCoordOps_markServerInactive_args() noexcept;
  std::string serverIP;
  std::string port;

  _FrontEndCoordOps_markServerInactive_args__isset __isset;

  void __set_serverIP(const std::string& val);

  void __set_port(const std::string& val);

  bool operator == (const FrontEndCoordOps_markServerInactive_args & rhs) const
  {
    if (!(serverIP == rhs.serverIP))
      return false;
    if (!(port == rhs.port))
      return false;
    return true;
  }
  bool operator != (const FrontEndCoordOps_markServerInactive_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontEndCoordOps_markServerInactive_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontEndCoordOps_markServerInactive_pargs {
 public:


  virtual ~FrontEndCoordOps_markServerInactive_pargs() noexcept;
  const std::string* serverIP;
  const std::string* port;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontEndCoordOps_markServerInactive_result {
 public:

  FrontEndCoordOps_markServerInactive_result(const FrontEndCoordOps_markServerInactive_result&);
  FrontEndCoordOps_markServerInactive_result& operator=(const FrontEndCoordOps_markServerInactive_result&);
  FrontEndCoordOps_markServerInactive_result() {
  }

  virtual ~FrontEndCoordOps_markServerInactive_result() noexcept;

  bool operator == (const FrontEndCoordOps_markServerInactive_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FrontEndCoordOps_markServerInactive_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FrontEndCoordOps_markServerInactive_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FrontEndCoordOps_markServerInactive_presult {
 public:


  virtual ~FrontEndCoordOps_markServerInactive_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FrontEndCoordOpsClient : virtual public FrontEndCoordOpsIf {
 public:
  FrontEndCoordOpsClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FrontEndCoordOpsClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void notifyConnectionClosed(const std::string& serverIP, const std::string& port);
  void send_notifyConnectionClosed(const std::string& serverIP, const std::string& port);
  void recv_notifyConnectionClosed();
  void markServerInactive(const std::string& serverIP, const std::string& port);
  void send_markServerInactive(const std::string& serverIP, const std::string& port);
  void recv_markServerInactive();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FrontEndCoordOpsProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<FrontEndCoordOpsIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FrontEndCoordOpsProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_notifyConnectionClosed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_markServerInactive(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FrontEndCoordOpsProcessor(::std::shared_ptr<FrontEndCoordOpsIf> iface) :
    iface_(iface) {
    processMap_["notifyConnectionClosed"] = &FrontEndCoordOpsProcessor::process_notifyConnectionClosed;
    processMap_["markServerInactive"] = &FrontEndCoordOpsProcessor::process_markServerInactive;
  }

  virtual ~FrontEndCoordOpsProcessor() {}
};

class FrontEndCoordOpsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FrontEndCoordOpsProcessorFactory(const ::std::shared_ptr< FrontEndCoordOpsIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< FrontEndCoordOpsIfFactory > handlerFactory_;
};

class FrontEndCoordOpsMultiface : virtual public FrontEndCoordOpsIf {
 public:
  FrontEndCoordOpsMultiface(std::vector<std::shared_ptr<FrontEndCoordOpsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FrontEndCoordOpsMultiface() {}
 protected:
  std::vector<std::shared_ptr<FrontEndCoordOpsIf> > ifaces_;
  FrontEndCoordOpsMultiface() {}
  void add(::std::shared_ptr<FrontEndCoordOpsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void notifyConnectionClosed(const std::string& serverIP, const std::string& port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->notifyConnectionClosed(serverIP, port);
    }
    ifaces_[i]->notifyConnectionClosed(serverIP, port);
  }

  void markServerInactive(const std::string& serverIP, const std::string& port) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->markServerInactive(serverIP, port);
    }
    ifaces_[i]->markServerInactive(serverIP, port);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FrontEndCoordOpsConcurrentClient : virtual public FrontEndCoordOpsIf {
 public:
  FrontEndCoordOpsConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  FrontEndCoordOpsConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void notifyConnectionClosed(const std::string& serverIP, const std::string& port);
  int32_t send_notifyConnectionClosed(const std::string& serverIP, const std::string& port);
  void recv_notifyConnectionClosed(const int32_t seqid);
  void markServerInactive(const std::string& serverIP, const std::string& port);
  int32_t send_markServerInactive(const std::string& serverIP, const std::string& port);
  void recv_markServerInactive(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

} // namespace

#endif
