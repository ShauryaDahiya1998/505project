/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "FrontEndCoordOps_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace FrontEndCoordOps {


ServerDetails::~ServerDetails() noexcept {
}


void ServerDetails::__set_serverIP(const std::string& val) {
  this->serverIP = val;
}

void ServerDetails::__set_port(const std::string& val) {
  this->port = val;
}
std::ostream& operator<<(std::ostream& out, const ServerDetails& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t ServerDetails::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->serverIP);
          this->__isset.serverIP = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ServerDetails::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("ServerDetails");

  xfer += oprot->writeFieldBegin("serverIP", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->serverIP);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(ServerDetails &a, ServerDetails &b) {
  using ::std::swap;
  swap(a.serverIP, b.serverIP);
  swap(a.port, b.port);
  swap(a.__isset, b.__isset);
}

ServerDetails::ServerDetails(const ServerDetails& other0) {
  serverIP = other0.serverIP;
  port = other0.port;
  __isset = other0.__isset;
}
ServerDetails& ServerDetails::operator=(const ServerDetails& other1) {
  serverIP = other1.serverIP;
  port = other1.port;
  __isset = other1.__isset;
  return *this;
}
void ServerDetails::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "ServerDetails(";
  out << "serverIP=" << to_string(serverIP);
  out << ", " << "port=" << to_string(port);
  out << ")";
}

} // namespace
